<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="ams.user.mapper.userMapper">
   <insert id="signup">
    INSERT INTO USERS(USER_ID, USER_PW, USER_NAME, USER_EMAIL)
       					VALUES(#{userId}, #{userPw}, #{userName}, #{userEmail})
   </insert>
   
   <insert id="signupOAuth">
    INSERT INTO USERS(USER_ID, USER_PW, USER_NAME, USER_TOKEN, USER_TYPE)
       					VALUES(#{userId}, #{userPw}, #{userName}, #{userToken}, #{userType})
   </insert>
   
   <insert id="setAuthority">
   	INSERT INTO AUTHORITIES(USER_ID)
   							VALUES(#{userId})
   </insert>
   
   <select id="idChk" resultType="int">
   	SELECT COUNT(*) FROM USERS WHERE USER_ID = #{userId}
   </select>
   
   <select id="nameChk" resultType="int">
   	SELECT COUNT(*) FROM USERS WHERE USER_NAME = #{userName}
   </select>
   
   <select id="emailChk" resultType="int">
   	SELECT COUNT(*) FROM USERS WHERE USER_EMAIL = #{userEmail}
   </select>
   
   <select id="pwChk" resultType="int">
   	SELECT COUNT(*) FROM USERS WHERE USER_PW = #{userPw} AND USER_ID = #{userId}
   </select>
   
   <delete id="signout" parameterType="ams.user.domain.UserVO">
   	DELETE FROM USERS WHERE USER_ID = #{userId};
   </delete>
   
   <select id="getUserInfo" resultType="ams.user.domain.UserVO">
   	SELECT * FROM USERS WHERE USER_ID = #{userId}
   </select>
   
   <select id="findUser" resultType="String">
     SELECT USER_NAME FROM USERS WHERE USER_ID=#{userId}
   </select>
   
   <resultMap id="GroupMemberVO" type="GroupMemberVO">
	    <result property="groupAuthority" column="GROUP_AUTHORITY"/>
	    <result property="regDate" column="REG_DATE"/>
	 </resultMap>
   <resultMap id="GroupVO" type="GroupVO">
	    <result property="groupId" column="GROUP_ID"/>
	    <result property="groupCategory" column="GROUP_CATEGORY"/>
	    <result property="groupName" column="GROUP_NAME"/>
	    <result property="groupPeriod" column="GROUP_PERIOD"/>
	    <result property="groupArea" column="GROUP_AREA"/>
	    <result property="groupStatus" column="GROUP_STATUS"/>
	    <collection property="groupMemberVO" resultMap="GroupMemberVO"/>
	</resultMap>
   <select id="findJoinedGroup" resultMap="GroupVO">
   	SELECT SG.GROUP_ID,
   				SG.GROUP_CATEGORY,
   				SG.GROUP_NAME,
   				SG.GROUP_PERIOD,
   				SG.GROUP_AREA,
   				SG.GROUP_STATUS,
   				GM.GROUP_AUTHORITY,
   				GM.REG_DATE
   	FROM STUDY_GROUPS SG
   	LEFT JOIN GROUP_MEMBERS GM
   	ON SG.GROUP_ID = GM.GROUP_ID
   	WHERE GM.USER_ID=#{userId}
   </select>
   
   <resultMap id="GroupScheduleVO" type="GroupScheduleVO">
	    <result property="groupId" column="GROUP_ID"/>
	    <result property="groupCategory" column="GROUP_CATEGORY"/>
	    <result property="groupName" column="GROUP_NAME"/>
	    <result property="beginTime" column="BEGIN_TIME"/>
	</resultMap>
   <select id="showWeekSchedule" parameterType="UserVO" resultMap="GroupScheduleVO">
   SELECT DISTINCT GS.GROUP_ID, GS.SCHEDULE_ID,
   				 SG.GROUP_CATEGORY,
   				 SG.GROUP_NAME,
   				 GS.BEGIN_TIME
   	FROM GROUP_SCHEDULES GS
    LEFT JOIN STUDY_GROUPS SG ON SG.GROUP_ID = GS.GROUP_ID
    RIGHT JOIN GROUP_MEMBERS GM ON GM.USER_ID = #{userId} AND GM.GROUP_ID = GS.GROUP_ID
   	WHERE GS.BEGIN_TIME BETWEEN #{weekStart} AND #{weekEnd}
   </select>
   
   <update id="modifyUser" parameterType="ams.user.domain.UserVO">
      UPDATE USERS SET USER_NAME = #{userName}, USER_EMAIL=#{userEmail} WHERE USER_ID=#{userId}
   </update>
   
   <update id="modifyUserPw" parameterType="ams.user.domain.UserVO">
      UPDATE USERS SET USER_PW = #{userPw} WHERE USER_ID=#{userId}
   </update>
   
   <update id="modifyOAuthUser" parameterType="ams.user.domain.UserVO">
      UPDATE USERS SET USER_NAME = #{userName}, USER_EMAIL=#{userEmail} WHERE USER_ID=#{userId}
   </update>
   
   <update id="updateOAuthToken" parameterType="ams.user.domain.UserVO">
   		UPDATE USERS SET ACCESS_TOKEN = #{accessToken} WHERE USER_ID = #{userId}
   </update>
   
   <update id="signoutComment">
      UPDATE GROUP_COMMENT SET USER_ID = '탈퇴한 사용자' WHERE USER_ID=#{userId}
   </update>
   <delete id="signoutStudyGroup">
   		DELETE FROM STUDY_GROUPS WHERE GROUP_ID IN 
		(SELECT GROUP_ID
		FROM (SELECT DISTINCT SG.GROUP_ID
			FROM STUDY_GROUPS SG
			LEFT JOIN GROUP_MEMBERS GM
			ON SG.GROUP_ID = GM.GROUP_ID
			GROUP BY SG.GROUP_ID
			HAVING COUNT(IF (GM.GROUP_AUTHORITY = 'MASTER', GM.GROUP_AUTHORITY, null)) = 0
			AND COUNT(IF (GM.GROUP_AUTHORITY = 'MEMBER', GM.GROUP_AUTHORITY, null)) = 0) TMP) AND group_master_id =#{userId}
   </delete>
   
   <update id="updateMemberMaster">
		UPDATE GROUP_MEMBERS SET GROUP_AUTHORITY = 'MASTER'
		WHERE GROUP_ID IN (
			SELECT GROUP_ID
			FROM (
				SELECT GROUP_ID
				FROM GROUP_MEMBERS
				GROUP BY GROUP_ID
				HAVING COUNT(IF (GROUP_AUTHORITY = 'MASTER', GROUP_AUTHORITY, null)) = 0) TMP)
		ORDER BY REG_DATE ASC
		limit 1;
	</update>
	
	<update id="updateMaster">
		UPDATE STUDY_GROUPS SG
		JOIN GROUP_MEMBERS GM
		ON SG.GROUP_ID = GM.GROUP_ID
		AND GM.GROUP_AUTHORITY = 'MASTER'
		AND SG.GROUP_MASTER_ID != GM.USER_ID
		SET SG.GROUP_MASTER_ID = GM.USER_ID
	</update>
   
</mapper>
  